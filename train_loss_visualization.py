import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import inspect
import os
import random
import sys

def extract_log(log_file,new_log_file,key_word):
    FPs = []
    TPs = []
    with open(log_file, 'r') as f:
      with open(new_log_file, 'w') as train_log:
  #f = open(log_file)
    #train_log = open(new_log_file, 'w')
        for line in f:
    # Remove moregpuSynchronization log
          if 'Syncing' in line:
            continue
    # Remove log of zero error
          if 'nan' in line:
            continue
          if key_word in line:
            if 'FP = ' in line:
                vals = line.split(',')
                tp = int(vals[1].split(' ')[-1])
                fp = int(vals[2].split(' ')[-1])
                fn = int(vals[3].split(' ')[-1])
                FPs.append(fp)
                TPs.append(tp)
            train_log.write(line)
    f.close()
    train_log.close()
    return TPs, FPs
    
def extract_log_pr(log_file,new_log_file,key_word):
    maps = []
    precisions = []
    recalls = []
    f1s = []
    with open(log_file, 'r') as f:
      with open(new_log_file, 'w') as train_log:
  #f = open(log_file)
    #train_log = open(new_log_file, 'w')
        for line in f:
    # Remove moregpuSynchronization log
          if 'Syncing' in line:
            continue
    # Remove log of zero error
          if 'nan' in line:
            continue
          if key_word in line:
            if '(mAP@0.5)' in line:
                map = line.split(' ')[-2]
                maps.append(float(map))
            if 'precision = ' in line:
                vals = line.split(',')
                prec = vals[1].split(' ')[-1]
                recall = vals[2].split(' ')[-1]
                f1 = vals[3].split(' ')[-2]
                precisions.append(float(prec))
                recalls.append(float(recall))
                f1s.append(float(f1))
            train_log.write(line)
    f.close()
    train_log.close()
    return maps, precisions, recalls, f1s


def plot_loss(lossfile, figname, title, num_lines):
    lines =num_lines    #Change the number of lines in train_log_loss.txt generated by yourself
    result = pd.read_csv(lossfile, skiprows=[x for x in range(lines) if ((x%10!=9) |(x<1000))] ,error_bad_lines=False, names=['loss', 'avg', 'rate', 'seconds', 'images'])
    result.head()
     
    result['loss']=result['loss'].str.split(' ').str.get(1)
    result['avg']=result['avg'].str.split(' ').str.get(1)
    result['rate']=result['rate'].str.split(' ').str.get(1)
    result['seconds']=result['seconds'].str.split(' ').str.get(1)
    result['images']=result['images'].str.split(' ').str.get(1)
    result.head()
    result.tail()
     
    # print(result.head())
    # print(result.tail())
    # print(result.dtypes)
     
    print(result['loss'])
    print(result['avg'])
    print(result['rate'])
    print(result['seconds'])
    print(result['images'])
     
    result['loss']=pd.to_numeric(result['loss'])
    result['avg']=pd.to_numeric(result['avg'])
    result['rate']=pd.to_numeric(result['rate'])
    result['seconds']=pd.to_numeric(result['seconds'])
    result['images']=pd.to_numeric(result['images'])
    result.dtypes
     
     
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(result['avg'].values,label='avg_loss')
    # ax.plot(result['loss'].values,label='loss')
    ax.legend(loc='best')  # 
    ax.set_title('Loss - '+title)
    ax.set_xlabel('batches')
    fig.savefig(figname)
    plt.show()
    # fig.savefig('loss')
    
def plotIOU_L(ioufile, figname, title, num_lines):
    lines = 122956    #Modify according to the number of lines of train_log_iou.txt
    result = pd.read_csv(ioufile, skiprows=[x for x in range(lines) if (x%10==0 or x%10==9) ] ,error_bad_lines=False, names=['Region Avg IOU', 'Class', 'Obj', 'No Obj', 'Avg Recall','count'])
    result.head()
     
    result['Region Avg IOU']=result['Region Avg IOU'].str.split(': ').str.get(1)
    result['Class']=result['Class'].str.split(': ').str.get(1)
    result['Obj']=result['Obj'].str.split(': ').str.get(1)
    result['No Obj']=result['No Obj'].str.split(': ').str.get(1)
    result['Avg Recall']=result['Avg Recall'].str.split(': ').str.get(1)
    result['count']=result['count'].str.split(': ').str.get(1)
    result.head()
    result.tail()
     
    # print(result.head())
    # print(result.tail())
    # print(result.dtypes)
    print(result['Region Avg IOU'])
     
    result['Region Avg IOU']=pd.to_numeric(result['Region Avg IOU'])
    result['Class']=pd.to_numeric(result['Class'])
    result['Obj']=pd.to_numeric(result['Obj'])
    result['No Obj']=pd.to_numeric(result['No Obj'])
    result['Avg Recall']=pd.to_numeric(result['Avg Recall'])
    result['count']=pd.to_numeric(result['count'])
    result.dtypes
    
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(result['Region Avg IOU'].values,label='Loss')
    # ax.plot(result['Class'].values,label='Class')
    # ax.plot(result['Obj'].values,label='Obj')
    # ax.plot(result['No Obj'].values,label='No Obj')
    #ax.plot(result['Avg Recall'].values,label='Avg Recall')
    # ax.plot(result['count'].values,label='count')
    ax.legend(loc='best')
    # ax.set_title('The Region Avg IOU curves')
    ax.set_title('Loss - '+title)
    ax.set_xlabel('batches')
    # fig.savefig('Avg IOU')
    fig.savefig(figname)
    
def plotIOU(ioufile, figname, title, num_lines):
    lines = 122956    #Modify according to the number of lines of train_log_iou.txt
    result = pd.read_csv(ioufile, skiprows=[x for x in range(lines) if (x%10==0 or x%10==9) ] ,error_bad_lines=False, names=['Region Avg IOU', 'Class', 'Obj', 'No Obj', 'Avg Recall','count'])
    result.head()
     
    result['Region Avg IOU']=result['Region Avg IOU'].str.split(': ').str.get(1)
    result['Class']=result['Class'].str.split(': ').str.get(1)
    result['Obj']=result['Obj'].str.split(': ').str.get(1)
    result['No Obj']=result['No Obj'].str.split(': ').str.get(1)
    result['Avg Recall']=result['Avg Recall'].str.split(': ').str.get(1)
    result['count']=result['count'].str.split(': ').str.get(1)
    result.head()
    result.tail()
     
    # print(result.head())
    # print(result.tail())
    # print(result.dtypes)
    print(result['Region Avg IOU'])
     
    result['Region Avg IOU']=pd.to_numeric(result['Region Avg IOU'])
    result['Class']=pd.to_numeric(result['Class'])
    result['Obj']=pd.to_numeric(result['Obj'])
    result['No Obj']=pd.to_numeric(result['No Obj'])
    result['Avg Recall']=pd.to_numeric(result['Avg Recall'])
    result['count']=pd.to_numeric(result['count'])
    result.dtypes
    
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(result['Region Avg IOU'].values,label='Region Avg IOU')
    # ax.plot(result['Class'].values,label='Class')
    # ax.plot(result['Obj'].values,label='Obj')
    # ax.plot(result['No Obj'].values,label='No Obj')
    ax.plot(result['Avg Recall'].values,label='Avg Recall')
    # ax.plot(result['count'].values,label='count')
    ax.legend(loc='best')
    # ax.set_title('The Region Avg IOU curves')
    ax.set_title('The Region Avg IOU curves - '+title)
    ax.set_xlabel('batches')
    # fig.savefig('Avg IOU')
    fig.savefig(figname)
    
def plotPR(prec, recall, figname, title):
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    #ax.scatter(recall, prec)
    x = np.linspace(1000, (len(prec)-1)*100 + 1000, len(prec))
    ax.plot(x, recall, label='recall')
    ax.plot(x, prec, label='precision')
    # ax.plot(result['count'].values,label='count')
    # ax.legend(loc='best')
    # ax.set_title('The Region Avg IOU curves')
    ax.set_title('Precision and Recall - '+title)
    ax.set_xlabel('Iteration where IoU at 0.5 threshold')
    #ax.set_ylabel('Precision')
    ax.legend(loc='best')
    fig.savefig(figname)
    
logs = os.listdir('logs')

for log in logs:
    extract_log('logs/'+log, log.split('.')[0]+'_loss.txt','images')
    extract_log('logs/'+log, log.split('.')[0]+'_iou.txt','IoU')
    maps, precisions, recalls, f1s = extract_log_pr('logs/'+log, log.split('.')[0]+'_pr.txt','precision')
    print(maps)
    print(precisions)
    print(recalls)
    plt.figure()
    plt.plot(maps)
    plt.title(log)
    #plt.show()
    plotPR(precisions, recalls, log.split('.')[0]+'_PR', log.split('.')[0])
    #extract_log('logs/'+log, log.split('.')[0]+'_iou.txt','IOU')
    #plot_loss(log.split('.')[0]+'_loss.txt', log.split('.')[0]+'_loss', log.split('.')[0], 50000)
    plotIOU_L(log.split('.')[0]+'_loss.txt', log.split('.')[0]+'_loss', log.split('.')[0], 50000)
    #plotIOU(log.split('.')[0]+'_iou.txt', log.split('.')[0]+'_iou', log.split('.')[0], 50000)
